plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.choongang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security' //변조 방지, 토큰 사용해서 접근 처리
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' //인증, 인가
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testRuntimeOnly 'com.h2database:h2' //매번 실행할 필요없이 test할 때만 실행하기 때문에 testRuntimeOnly로 변경
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0' //thymeleaf-layout 추가
	implementation 'org.modelmapper:modelmapper:3.2.1' //필드 값을 자동으로 객체와 mapping

	implementation 'com.querydsl:querydsl-jpa:5.1.0' //querydsl 의존성 추가
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0' //annotationProcessor로 변경

	annotationProcessor 'jakarta.annotation:jakarta.annotation-api' //5버전은 javax가 기본 패키지
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api' //javax->jakarta로 패키지 호환하기 위해 추가

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}